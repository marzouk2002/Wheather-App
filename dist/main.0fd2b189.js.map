{"version":3,"sources":["js/API-handle.js","js/main.js"],"names":["API_KEY","API","getdata","api","Promise","resolve","reject","fetch","then","res","json","data","sol_keys","validity_checks","solData","Object","entries","map","sol","maxTemp","AT","max","minTemp","min","windSpeed","HWS","av","windDirectionDegrees","WD","most_comon","compass_degrees","windDirectionCardinal","compass_point","date","Date","First_UTC","dataPromise","lowerPartBtn","document","querySelector","lowerPart","currentSol","currentDate","currentTempH","currentTempL","currentWindSpeed","currentWindDirectionA","currentWindDirectionT","previousSolTemp","previousSolContainer","unitToggle","unitMetric","unitImperial","formatDate","toLocaleDateString","undefined","day","month","formateTemp","temp","Math","checked","round","formateSpeed","speed","upDateUnits","tempUnits","querySelectorAll","speedUnits","forEach","unit","innerText","setData","latestIndex","latestData","innerHTML","style","setProperty","index","solContainer","content","cloneNode","addEventListener","append","lowerstate","firstChild","classList","remove","add","length","status"],"mappings":"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","file":"main.0fd2b189.js","sourceRoot":"../src","sourcesContent":["let API_KEY = 'dWH02vmWyuYdcsZUWJZeY9BZan92ga6tNoNZqXbK'\nlet API = `https://api.nasa.gov/insight_weather/?api_key=${API_KEY}&feedtype=json&ver=1.0`\n\nfunction getdata(api) {\n    return new Promise((resolve, reject) => {\n        fetch(api)\n            .then(res => res.json())\n            .then(data => {\n                const {\n                    sol_keys,\n                    validity_checks,\n                    ...solData\n                } = data\n                resolve(Object.entries(solData).map(([sol, data]) => {\n                    return {\n                        sol: sol,\n                        maxTemp: data.AT.max,\n                        minTemp: data.AT.min,\n                        windSpeed: data.HWS.av,\n                        windDirectionDegrees: data.WD.most_comon.compass_degrees,\n                        windDirectionCardinal: data.WD.most_comon.compass_point,\n                        date: new Date(data.First_UTC)\n                    }\n                }))\n            })\n    })\n}\n\nexport const dataPromise = getdata(API)\n","import '../sass/main.scss';\nimport { dataPromise } from './API-handle.js'\n\nconst lowerPartBtn = document.querySelector('.previous-wheather_show')\nconst lowerPart = document.querySelector('.previous-wheather')\n\nconst currentSol = document.querySelector('[data-current-sol]')\nconst currentDate = document.querySelector('[data-current-date]')\nconst currentTempH = document.querySelector('[data-current-temp-high]')\nconst currentTempL = document.querySelector('[data-current-temp-low]')\nconst currentWindSpeed = document.querySelector('[data-current-wind-speed]')\nconst currentWindDirectionA = document.querySelector('[data-wind-direction-arrow]')\nconst currentWindDirectionT = document.querySelector('[data-wind-direction-text]')\n\nconst previousSolTemp = document.querySelector('[data-previous-sol-temp]')\nconst previousSolContainer = document.querySelector('[data-previous-sols]')\n\nconst unitToggle = document.querySelector('[data-unit-toggle]')\nconst unitMetric = document.querySelector('#cel')\nconst unitImperial = document.querySelector('#fah')\n\nfunction formatDate(date) {\n    return date.toLocaleDateString(undefined, {\n        day: 'numeric', month: 'long'\n    })\n}\n\nfunction formateTemp(temp) {\n    if (!unitMetric.checked) {\n        temp = (temp * 1.8) + 32\n    }\n    return Math.round(temp)\n}\n\nfunction formateSpeed(speed) {\n    if (!unitMetric.checked) {\n        speed = speed * 1.6\n    }\n    return Math.round(speed)\n}\n\nfunction upDateUnits() {\n    let tempUnits = document.querySelectorAll('[data-unit-temp]')\n    let speedUnits = document.querySelectorAll('[data-unit-speed]')\n    tempUnits.forEach(unit => unit.innerText = unitMetric.checked ? 'C' : 'F')\n    speedUnits.forEach(unit => unit.innerText = unitMetric.checked ? 'kph' : 'mph')\n}\n\nfunction setData(res, latestIndex) {\n    let latestData = res[latestIndex]\n    currentSol.innerHTML = latestData.sol\n    currentDate.innerHTML = formatDate(latestData.date)\n    currentTempH.innerHTML = formateTemp(latestData.maxTemp)\n    currentTempL.innerHTML = formateTemp(latestData.minTemp)\n    currentWindSpeed.innerHTML = formateSpeed(latestData.windSpeed)\n    currentWindDirectionA.style.setProperty('--direction', `${latestData.windDirectionDegrees}deg`)\n    currentWindDirectionT.innerHTML = latestData.windDirectionCardinal\n\n    previousSolContainer.innerHTML = ''\n    res.forEach((solData, index) => {\n        const solContainer = previousSolTemp.content.cloneNode(true)\n        solContainer.querySelector('[data-sol]').innerHTML = solData.sol\n        solContainer.querySelector('[data-date]').innerHTML = formatDate(solData.date)\n        solContainer.querySelector('[data-temp-high]').innerHTML = formateTemp(solData.maxTemp)\n        solContainer.querySelector('[data-temp-low]').innerHTML = formateTemp(solData.minTemp)\n\n        solContainer.querySelector('[data-more-info]').addEventListener('click', () => {\n            setData(res, index)\n        })\n        previousSolContainer.append(solContainer)\n    });\n    upDateUnits()\n}\n\nlet lowerstate = false\nlowerPartBtn.addEventListener('click', () => {\n    if (lowerstate) {\n        lowerPartBtn.firstChild.classList.remove('rotate')\n        lowerPart.classList.remove('show')\n        lowerstate = !lowerstate\n    } else {\n        lowerPartBtn.firstChild.classList.add('rotate')\n        lowerstate = !lowerstate\n        lowerPart.classList.add('show')\n    }\n})\n\ndataPromise.then(res => {\n    let latestIndex = res.length - 1\n\n    unitToggle.addEventListener('click', () => {\n        let status = !unitMetric.checked\n        unitMetric.checked = status\n        unitImperial.checked = !status\n        setData(res, latestIndex)\n    })\n\n    setData(res, latestIndex)\n})\n"]}